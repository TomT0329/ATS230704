/***********************************************************************************************//**
 * @file        app_Modbus_RTU.h
 * @brief       app_Modbus_RTU.h
 * @date        SEP 11, 2023
 * @version     1.0.0
 * @author      TOM.TANG
 *
 * Revision History
 *------------------------------------------------------------------------------------------------
 *|Version   |Date       |Author         |Change ID      |Description                            |
 *|----------|-----------|---------------|---------------|---------------------------------------|
 *|1.0.0     |2023.09.11 |TOM.TANG       |00000000000    |Initial version created                |
 **************************************************************************************************/
#ifndef INC_APP_MODBUS_RTU_H_
#define INC_APP_MODBUS_RTU_H_
/*================================================================================================*=
 * INCLUDE FILES
 *================================================================================================*/
#include "stdint.h"
#include "stdio.h"
#include "stm32G4xx_hal.h"
#include "main.h"
/*================================================================================================*=
 * LOCAL TYPEDEFS (STRUCTURES, UNIONS, ENUMS)
 *================================================================================================*/
// Control register
typedef enum
{
	_ID_SET_WORD_MIN   		 = 0x0000,							// Start

	DRIVER_CTRL   			 = _ID_SET_WORD_MIN,				// RPU MODBUS device ID
	DRIVER_PARA,
	DRIVER_EEPROM,
	DRIVER_FREQ,
	HEATER_SHCURRENT,
	DRIVER_OAT,
	DRIVER_RESERVED1,
	DRIVER_RESERVED2,
	DRIVER_SECURITY1,
	DRIVER_SECURITY2,

	DRIVER_STATUS			= 0x000a,
	DRIVER_RESERVED3,
	EEPROM_STATUS,
	COMP_FREQ,
	COMP_VOLTAGE,
	COMP_CURRENT,
	COMP_POWER,
	COMP_TORQUE,
	IPM_TEMP,
	IPM_PWMFREQ,
	DCBUS_VOLTAGE,
	AC_VOLTAGE,
	AC_CURRENT,
	AC_POWER,
	VDC_RIPPLE,
	PFC_TEMP,
	PFCPWM_FREQ,
	PCB_TEMP,
	DLT_VOLTAGE,
	IF_VOLTAGE,
	DRIVER_RESERVED4,
	SL_SR,
	FAULT_CODE,
	FAULT1,
	FAULT2,
	FAULT3,
	MESSAGE_COUNT_ACK,
	MESSAGE_COUNT_NACK,
	MESSAGE_COUNT_BAD,
	DRIVER_RESERVED5		= 0x0027,
	HISTORY_FAULT_CODE1		=0x0040,
	POWER_ON_TIME			=0x004a,
	COMP_RUN_TIME,
	COMP_RUN_TIME1,
	SH_RUN_TIME,
	ENERGY,
	BL_VER					=0x0050,
	BL_CRC,
	DRIVER_RESERVED6,
	FW_VER,
	DRIVER_RESERVED7,
	EE_VER,
	DRIVER_RESERVED8,
	PROG_ID					=0x0058,
	MODEL_NUM				=0x0060,
	SERIAL_NUM				=0x0068,
	COMP_NUM				=0x0070,
	_ID_SET_WORD_MAX   	   = 0x0077,
} _MODBUS_SLAVE_ADDR;


typedef enum{
	FIRST_DATA = 0,
	SECOND_DATA  = 1,
	THIRD_DATA  = 2,
}UART_RX_ST;

typedef struct
{
	uint8_t rbuf[8];
	uint8_t buf[260];
	int8_t ok;
	int8_t reserved[2];
	int16_t size;
	int16_t cnt;
} UART_BUFF_STR;

typedef struct
{
	//int8_t slaveID;
	int8_t timeOut;
	int8_t errCode;  //1:funErr, 2:AddrErr, 3:DataErr, 4:DevicErr, 5:command busy, 6:system busy
	//int8_t reserved;
	UART_BUFF_STR tx;
	UART_BUFF_STR rx;
} UART_STR;

typedef union
{
    uint16_t wds[_ID_SET_WORD_MAX - _ID_SET_WORD_MIN + 1];
    struct
    {
		/* R/W registers*/
    	uint16_t Ctrl;      	 // 0x00 
    	uint16_t Para;   		 // 0x01 
    	uint16_t EEPROM;         // 0x02 
    	int16_t Freq; 	     	 // 0x03 
    	uint16_t SH_current;     // 0x04 
    	int16_t OAT;             // 0x05 
		uint16_t Reserved1;		 // 0x06
		uint16_t Reserved2;		 // 0x07
		uint16_t Security1;		 // 0x08
		uint16_t Security2;		 // 0x09
		/* R only registers*/
		uint16_t Status;			//0x10
		uint16_t Reserved3;
		uint16_t EE_status;
		int16_t Comp_freq;
		int16_t Comp_voltage;
		int16_t Comp_current;
		int16_t Comp_power;
		int16_t Comp_torque;
		int16_t Ipm_temp;
		uint16_t Ipm_pwmfreq;
		int16_t DCbus_voltage;
		int16_t AC_voltage;
		int16_t AC_current;
		uint16_t AC_power;
		uint16_t VDC_ripple;
		int16_t PFC_temp;
		uint16_t PFC_pwm;
		int16_t DLT_voltage;
		int16_t IF_voltage;
		uint16_t Reserved4;
		uint16_t SL_SR;
		uint16_t Fault_code;
		uint16_t Fault1;
		uint16_t Fault2;
		uint16_t Fault3;
		uint16_t ACK_count;
		uint16_t NACK_count;
		uint16_t BAD_count;
		/*Addr 39-63*/
		uint16_t Reserved5[24];
		/*Addr 64-73*/
		uint16_t History_fault[10];
		uint16_t Power_on_time;
		uint16_t Comp_run_time;
		uint16_t SH_run_time;
		uint16_t Energy;
		uint16_t BL_ver;
		uint16_t BL_crc;
		uint16_t Reserved6;
		uint16_t FW_ver;
		uint16_t Reserved7;
		uint16_t EE_ver;
		/*Addr 86-87*/
		uint16_t Reserved8[2];
		/*Addr 88-95*/
		uint16_t Prog_ID[8];
		/*Addr 96-103*/
		uint16_t Model_num[8];
		/*Addr 104-111*/
		uint16_t Serial_num[8];
		/*Addr 112-119*/
		uint16_t Com_num[8];
    } Driver;
} _MEM_REG_1;

typedef union
{
    int16_t wds[260];
    struct
    {
    	int16_t  Temp;   		// 0x0000
    } inputReg;
} MEM_INPUT_REG_1;

// Alarm register
typedef union
{
    uint16_t wds[2];
    struct
    {
        uint16_t filesize_high;  	
        uint16_t filesize_low;
    } inputReg;
} MEM_INPUT_REG_2;


typedef struct _MODBUS_STR
{
	_MEM_REG_1 		wordReg1;
	MEM_INPUT_REG_1 inputReg1;
	MEM_INPUT_REG_2 inputReg2;
} MODBUS_STR;

typedef union
{
    int16_t w;
    struct
    {
        int8_t lo;
        int8_t hi;
    } b;
}TRANS_TYPE;

/*================================================================================================*=
 * GLOBAL MACROS
 *================================================================================================*/
#define	OFF 0x00
#define ON  0xff
#define MODBUS_GET_BIT(x, bit) ((x & (1<<bit)) >> bit)
#define MODBUS_SET_BIT(x, bit) (x = x | (1 << bit))
#define MODBUS_CLEAR_BIT(x, bit) (x = x & (~(1 << bit)))
#define RX_DATA_SIZE    200
#define MAX_ACC_TIME	(uint16_t)100000
#define MIN_ACC_TIME	(uint16_t)5000
#define MAX_SPEED_01HZ	820
#define MIN_SPEED_01HZ	250

#define DRIVER_SLAVE_ID		0x01
#define USART_TIMEOUT_CNT   8
#define ERR_MODBUS_Func    1
#define ERR_MODBUS_ADDR    2
#define ERR_MODBUS_PARA    3
#define ERR_MODBUS_WRITE   4

#define U1_485_DIR_PORT		U1_DIR_GPIO_Port //
#define U1_485_DIR_PIN		U1_DIR_Pin // 
#define U2_485_DIR_PORT		U2_DIR_GPIO_Port // GPIOD
#define U2_485_DIR_PIN		U2_DIR_Pin // GPIO_PIN_2
#define U2_485_PIN_HIGH     NULL
#define U2_485_PIN_LOW      NULL
#define U2_TX_BUFF          NULL
#define U2_RX_BUFF          NULL

#define CTRL_FLAG           stModb.ctrlFlag.all[0]
#define MEM_REG_1           stModb.wordReg1.Driver
#define INPUT_REG_1         stModb.inputReg1.inputReg
#define INPUT_REG_2         stModb.inputReg2.inputReg
#define INPUT_REG_3         stModb.inputReg3.inputReg
/*================================================================================================*=
 * GLOBAL CONSTANTS
 *================================================================================================*/
static const char auchCRCHi[] =
{
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
	0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,
	0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,
	0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
	0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
	0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,
	0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
	0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40
};

static const char auchCRCLo[] =
{
	0x00,0xc0,0xc1,0x01,0xc3,0x03,0x02,0xc2,0xc6,0x06,0x07,0xc7,0x05,0xc5,0xc4,0x04,0xcc,0x0c,0x0d,0xcd,
	0x0f,0xcf,0xce,0x0e,0x0a,0xca,0xcb,0x0b,0xc9,0x09,0x08,0xc8,0xd8,0x18,0x19,0xd9,0x1b,0xdb,0xda,0x1a,
	0x1e,0xde,0xdf,0x1f,0xdd,0x1d,0x1c,0xdc,0x14,0xd4,0xd5,0x15,0xd7,0x17,0x16,0xd6,0xd2,0x12,0x13,0xd3,
	0x11,0xd1,0xd0,0x10,0xf0,0x30,0x31,0xf1,0x33,0xf3,0xf2,0x32,0x36,0xf6,0xf7,0x37,0xf5,0x35,0x34,0xf4,
	0x3c,0xfc,0xfd,0x3d,0xff,0x3f,0x3e,0xfe,0xfa,0x3a,0x3b,0xfb,0x39,0xf9,0xf8,0x38,0x28,0xe8,0xe9,0x29,
	0xeb,0x2b,0x2a,0xea,0xee,0x2e,0x2f,0xef,0x2d,0xed,0xec,0x2c,0xe4,0x24,0x25,0xe5,0x27,0xe7,0xe6,0x26,
	0x22,0xe2,0xe3,0x23,0xe1,0x21,0x20,0xe0,0xa0,0x60,0x61,0xa1,0x63,0xa3,0xa2,0x62,0x66,0xa6,0xa7,0x67,
	0xa5,0x65,0x64,0xa4,0x6c,0xac,0xad,0x6d,0xaf,0x6f,0x6e,0xae,0xaa,0x6a,0x6b,0xab,0x69,0xa9,0xa8,0x68,
	0x78,0xb8,0xb9,0x79,0xbb,0x7b,0x7a,0xba,0xbe,0x7e,0x7f,0xbf,0x7d,0xbd,0xbc,0x7c,0xb4,0x74,0x75,0xb5,
	0x77,0xb7,0xb6,0x76,0x72,0xb2,0xb3,0x73,0xb1,0x71,0x70,0xb0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
	0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9c,0x5c,0x5d,0x9d,0x5f,0x9f,0x9e,0x5e,0x5a,0x9a,0x9b,0x5b,
	0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4b,0x8b,0x8a,0x4a,0x4e,0x8e,0x8f,0x4f,0x8d,0x4d,0x4c,0x8c,
	0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,0x43,0x83,0x41,0x81,0x80,0x40
};

/*================================================================================================*=
 * GLOBAL VARIABLES
 *================================================================================================*/
extern UART_HandleTypeDef huart2;
extern UART_STR U2;
extern UART_STR U1;
extern MODBUS_STR stModb;
extern uint8_t Rx_data[RX_DATA_SIZE];  //  creating a buffer of RX_DATA_SIZE bytes
extern uint8_t Rx_count;
/*================================================================================================*=
 * GLOBAL FUNCTIONS
 *================================================================================================*/
void Modbus_Slave_init();
void detec_uart(void);
void modbus_slave_value_update();
void uart_timOut(void);
void UartResponse(void);
void ctrl_rs485_pin(UART_STR* Ux, int8_t flag);
/*================================================================================================*=
 * END OF FILE
 *================================================================================================*/
#endif /* INC_APP_MODBUS_RTU_H_ */
